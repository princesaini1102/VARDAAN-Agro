// Prisma Schema for Vardaan Agro E-Commerce Platform
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  GUEST
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  phone     String?
  address   String?
  role      Role     @default(CUSTOMER)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart              Cart?
  orders            Order[]
  reviews           Review[]
  aiRecommendations AIRecommendation[]
  refreshTokens     RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  images      Json     // Array of image URLs
  categoryId  String
  sku         String   @unique
  weight      Decimal? @db.Decimal(8, 2)
  dimensions  Json?    // {length, width, height}
  isOrganic   Boolean  @default(true)
  isActive    Boolean  @default(true)
  rating      Decimal? @db.Decimal(3, 2) @default(0.00)
  reviewCount Int      @default(0)
  model3D     String?  // GLB/GLTF model URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category          Category           @relation(fields: [categoryId], references: [id])
  cartItems         CartItem[]
  orderItems        OrderItem[]
  reviews           Review[]
  aiRecommendations AIRecommendation[]

  @@map("products")
}

model Cart {
  id         String   @id @default(cuid())
  userId     String   @unique
  totalPrice Decimal  @db.Decimal(10, 2) @default(0.00)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  totalAmount   Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  shippingInfo  Json        // Address, phone, etc.
  trackingId    String?     @unique
  estimatedDate DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user     User        @relation(fields: [userId], references: [id])
  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  provider      String        // stripe, razorpay, etc.
  transactionId String?       @unique
  metadata      Json?         // Provider-specific data
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  images    Json?    // Array of image URLs
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@map("reviews")
}

model AIRecommendation {
  id        String   @id @default(cuid())
  userId    String
  productId String
  score     Decimal  @db.Decimal(5, 4) // 0.0000 to 1.0000
  reason    String?  // Why this product was recommended
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("ai_recommendations")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String   @unique
  messages  Json     // Array of chat messages
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chat_sessions")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("newsletters")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}