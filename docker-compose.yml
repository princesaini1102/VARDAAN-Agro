version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: vardaan-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: vardaan_agro
      MYSQL_USER: vardaan_user
      MYSQL_PASSWORD: vardaan_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - vardaan-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: vardaan-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vardaan-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      target: dev
    container_name: vardaan-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: mysql://vardaan_user:vardaan_password@mysql:3306/vardaan_agro
      JWT_SECRET: your-super-secret-jwt-key-development
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-development
      REDIS_URL: redis://redis:6379
      PORT: 5000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vardaan-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      target: dev
    container_name: vardaan-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:5000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - vardaan-network

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: vardaan-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - vardaan-network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  vardaan-network:
    driver: bridge